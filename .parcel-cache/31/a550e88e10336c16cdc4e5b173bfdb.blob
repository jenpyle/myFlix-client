var helpers = require("../../../../../AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "MainView", function () {
    return MainView;
  });
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  var _registrationViewRegistrationView = require('../registration-view/registration-view');
  var _loginViewLoginView = require('../login-view/login-view');
  var _movieCardMovieCard = require('../movie-card/movie-card');
  var _movieViewMovieView = require('../movie-view/movie-view');
  var _reactBootstrap = require('react-bootstrap');
  require('./main-view.scss');
  var _jsxFileName = "C:\\Users\\jenny\\git_projects\\myFlix-client\\src\\components\\main-view\\main-view.jsx";
  class MainView extends _reactDefault.default.Component {
    /*the export keyword exposes the MainView component, and the rest of the line creates the MainView component, extends from React.Component*/
    constructor() {
      /*where you initialize a state's values*/
      super();
      /*means call the constructor of the parent class(React.Component) ...  initializes your component’s state, and without it, you’ll get an error if you try to use this.state inside constructor()*/
      // prettier-ignore
      this.state = {
        /*represents the moment a component is created in the memory*/
        movies: [],
        selectedMovie: null,
        user: null,
        newUser: null
      };
    }
    componentDidMount() {
      _axiosDefault.default.get('https://jennysflix.herokuapp.com/movies').then(response => {
        this.setState({
          movies: response.data
        });
      }).catch(error => {
        console.log(error);
      });
    }
    /*When a movie is clicked, this function is invoked and updates the state of the `selectedMovie` *property to that movie*/
    setSelectedMovie(newSelectedMovie) {
      this.setState({
        selectedMovie: newSelectedMovie
      });
    }
    /*When a user successfully logs in, this function updates the `user` property in state to that *particular user*/
    onLoggedIn(user) {
      console.log('-----------------------inside onLoggedIn');
      console.log('user = ', user);
      this.setState({
        user
      });
    }
    onRegisterNewUser(newUser) {
      console.log('-----------------------inside OnRegistetrNewUser');
      console.log(' newUser = ', newUser);
      this.setState({
        newUser
      });
    }
    onLoggedOut() {
      console.log('-----------------------inside onLoggedOut');
      this.setState({
        user: null,
        newUser: null
      });
    }
    /*prettier-ignore*/
    render() {
      const {movies, selectedMovie, user, newUser} = this.state;
      console.log("user , new user = ", user, ", ", newUser);
      if (newUser !== null && user === null) {
        return (
          /*#__PURE__*/_reactDefault.default.createElement(_registrationViewRegistrationView.RegistrationView, {
            user: user,
            newUser: newUser,
            onLoggedIn: user => this.onLoggedIn(user),
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 80,
              columnNumber: 51
            }
          })
        );
      }
      /*If there is no user, the LoginView is rendered. If there is a user logged in, the user details are *passed as a prop to the LoginView*/
      if (user === null) {
        return (
          /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
            onRegisterNewUser: newUser => this.onRegisterNewUser(newUser),
            onLoggedIn: user => this.onLoggedIn(user),
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 83,
              columnNumber: 31
            }
          })
        );
      }
      // A method, onLoggedIn, will be passed as a prop with the same name to LoginView
      // This method will update the user state of the MainView component and will be called when the user has successfully logged in... to change the user state to valid instead of null?
      if (movies.length === 0) return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "main-view",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 86,
            columnNumber: 37
          }
        })
      );
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Container, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 89,
            columnNumber: 7
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "main-view",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 90,
            columnNumber: 7
          }
        }, selectedMovie ? /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Row, {
          className: "justify-content-md-center",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 93,
            columnNumber: 11
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Col, {
          md: 8,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 94,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_movieViewMovieView.MovieView, {
          movieData: selectedMovie,
          onBackClick: newSelectedMovie => {
            this.setSelectedMovie(newSelectedMovie);
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 95,
            columnNumber: 15
          }
        }))) : movies.map(movie => /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Row, {
          className: "justify-content-md-center",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 99,
            columnNumber: 11
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Col, {
          md: 8,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 100,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_movieCardMovieCard.MovieCard, {
          key: movie._id,
          movieData: movie,
          onMovieClick: movie => {
            this.setSelectedMovie(movie);
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 101,
            columnNumber: 15
          }
        })))), /*#__PURE__*/_reactDefault.default.createElement("button", {
          type: "button",
          onClick: () => this.onLoggedOut(),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 106,
            columnNumber: 7
          }
        }, "Log Out")))
      );
    }
  }
  exports.default = MainView;
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
