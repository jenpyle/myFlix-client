var helpers = require("../../../../../AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "MainView", function () {
    return MainView;
  });
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  require('prop-types');
  var _reactRouterDom = require('react-router-dom');
  var _reactBootstrap = require('react-bootstrap');
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  require('../registration-view/registration-view');
  var _loginViewLoginView = require('../login-view/login-view');
  require('../movie-cards/movie-cards');
  require('../movie-info-view/movie-info-view');
  require('../director-view/director-view');
  require('../genre-view/genre-view');
  require('../profile-view/profile-view');
  require('./main-view.scss');
  var _jsxFileName = "C:\\Users\\jenny\\git_projects\\myFlix-client\\src\\components\\main-view\\main-view.jsx";
  class MainView extends _reactDefault.default.Component {
    /*the export keyword exposes the MainView component, and the rest of the line creates the MainView component, extends from React.Component*/
    constructor() {
      /*where you initialize a state's values*/
      super();
      /*means call the constructor of the parent class(React.Component) ...  initializes your component’s state, and without it, you’ll get an error if you try to use this.state inside constructor()*/
      // prettier-ignore
      this.state = {
        /*represents the moment a component is created in the memory*/
        movies: [],
        selectedMovie: null,
        user: null,
        newUser: null
      };
    }
    componentDidMount() {
      console.log('this.state', this.state);
      console.log('inside componentDidMount() of Main-View');
      // this happens every time the user loads the page
      // code executed right after component is added to the DOM
      let accessToken = localStorage.getItem('token');
      if (accessToken !== null) {
        // if the access token is present it means the user is already logged in
        this.setState({
          user: localStorage.getItem('user')
        });
        this.getMovies(accessToken);
      }
    }
    /*When a movie is clicked, this function is invoked and updates the state of the `selectedMovie` *property to that movie*/
    setSelectedMovie(newSelectedMovie) {
      console.log('this.state', this.state);
      console.log('setSelectedMovie = new selected movie = ', newSelectedMovie);
      this.setState({
        selectedMovie: newSelectedMovie
      });
    }
    /*When a user successfully logs in, this function updates the `user` property in state to that *particular user*/
    onLoggedIn(authData) {
      console.log('this.state', this.state);
      // This happens the moment the user logs in
      // This updates the state with the logged in authData
      console.log('-----------------------inside onLoggedIn MAIN-VIEW', '....authUser = ', authData);
      this.setState({
        user: authData.user.Username
      });
      localStorage.setItem('token', authData.token);
      // store token and username in localStorage: a way to store data in client's browser. Next time the user opens their browser, localStorage will contain stored authentication information (token and username), and the user won’t be required to log in again
      localStorage.setItem('user', authData.user.Username);
      this.getMovies(authData.token);
    }
    onRegisterNewUser(newUser) {
      console.log('this.state', this.state);
      console.log('-----------------------inside OnRegistetrNewUser', '   newUser = ', newUser);
      this.setState({
        newUser
      });
    }
    onLoggedOut() {
      console.log('this.state', this.state);
      console.log('-----------------------inside onLoggedOut');
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      this.setState({
        user: null,
        newUser: null
      });
    }
    getMovies(token) {
      console.log('this.state', this.state);
      console.log('inside getMovies');
      _axiosDefault.default.get('https://jennysflix.herokuapp.com/movies', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(response => {
        // Assign the result to the state
        this.setState({
          movies: response.data
        });
      }).catch(function (error) {
        console.log(error);
      });
    }
    render() {
      const {movies, user} = this.state;
      if (!user) return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Row, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 115,
            columnNumber: 9
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Col, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 116,
            columnNumber: 11
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
          onLoggedIn: user => this.onLoggedIn(user),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 117,
            columnNumber: 13
          }
        })))
      );
      if (movies.length === 0) return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "main-view",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 121,
            columnNumber: 37
          }
        })
      );
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.BrowserRouter, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 124,
            columnNumber: 7
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Row, {
          className: "main-view justify-content-md-center",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125,
            columnNumber: 9
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          exact: true,
          path: "/",
          render: () => {
            return movies.map(m => /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Col, {
              md: 3,
              key: m._id,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 131,
                columnNumber: 17
              }
            }, /*#__PURE__*/_reactDefault.default.createElement(MovieCard, {
              movie: m,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 132,
                columnNumber: 19
              }
            })));
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 126,
            columnNumber: 11
          }
        }), /*#__PURE__*/_reactDefault.default.createElement(_reactRouterDom.Route, {
          path: "/movies/:movieId",
          render: ({match}) => {
            return (
              /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Col, {
                md: 8,
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 141,
                  columnNumber: 17
                }
              }, /*#__PURE__*/_reactDefault.default.createElement(MovieView, {
                movie: movies.find(m => m._id === match.params.movieId),
                __self: this,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 142,
                  columnNumber: 19
                }
              }))
            );
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 137,
            columnNumber: 11
          }
        })))
      );
    }
  }
  // render() {
  // const { movies, selectedMovie, user, newUser } = this.state;
  // console.log('user , new user = ', user, ', ', newUser);
  // return (
  // <Container>
  // <h1 className="title">MyFlix</h1>
  // <Button variant="secondary" type="button" onClick={() => this.onLoggedOut()}>
  // Log Out
  // </Button>
  // <div>
  // <br></br>
  // </div>
  {}
  // render() {
  // const { movies, selectedMovie, user, newUser } = this.state;
  // console.log('user , new user = ', user, ', ', newUser);
  // return (
  // <Container>
  // <h1 className="title">MyFlix</h1>
  // <Button variant="secondary" type="button" onClick={() => this.onLoggedOut()}>
  // Log Out
  // </Button>
  // <div>
  // <br></br>
  // </div>
  /*<Router>
  <Row className="main-view justify-content-md-center">
  <Route
  exact
  path="/"
  render={() => {
  if (user === null) {
  return <LoginView onLoggedIn={(user) => this.onLoggedIn(user)} />; //onLoggedIn method will update the user state of the MainView component and will be called when the user has successfully logged in... to change the user state to valid instead of null?
  }
  return movies.map((movie) => (
  <Col md={3} key={movie._id}>
  <MovieCards movieData={movie} onLogoutClick={() => this.onLoggedOut()} />
  </Col>
  ));
  }}
  />
  
  <Route
  path="/users"
  render={({ history }) => {
  return <RegistrationView user={user} newUser={newUser} onBackClick={() => history.goBack()} />;
  }}
  />*/
  {    // </Row>
    // </Router>
    // </Container>
    // );
    // }
    // }
}
  exports.default = MainView;
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
