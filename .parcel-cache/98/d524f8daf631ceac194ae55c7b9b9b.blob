var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "useBootstrapPrefix", function () {
  return useBootstrapPrefix;
});
_parcelHelpers.export(exports, "createBootstrapComponent", function () {
  return createBootstrapComponent;
});
_parcelHelpers.export(exports, "ThemeConsumer", function () {
  return Consumer;
});
var _babelRuntimeHelpersEsmExtends = require("@babel/runtime/helpers/esm/extends");
var _babelRuntimeHelpersEsmExtendsDefault = _parcelHelpers.interopDefault(_babelRuntimeHelpersEsmExtends);
var _react = require('react');
var _reactDefault = _parcelHelpers.interopDefault(_react);
var ThemeContext = /*#__PURE__*/_reactDefault.default.createContext({});
var Consumer = ThemeContext.Consumer, Provider = ThemeContext.Provider;
function ThemeProvider(_ref) {
  var prefixes = _ref.prefixes, children = _ref.children;
  var copiedPrefixes = _react.useMemo(function () {
    return _babelRuntimeHelpersEsmExtendsDefault.default({}, prefixes);
  }, [prefixes]);
  return (
    /*#__PURE__*/_reactDefault.default.createElement(Provider, {
      value: copiedPrefixes
    }, children)
  );
}
function useBootstrapPrefix(prefix, defaultPrefix) {
  var prefixes = _react.useContext(ThemeContext);
  return prefix || prefixes[defaultPrefix] || defaultPrefix;
}
function createBootstrapComponent(Component, opts) {
  if (typeof opts === 'string') opts = {
    prefix: opts
  };
  var isClassy = Component.prototype && Component.prototype.isReactComponent;
  // If it's a functional component make sure we don't break it with a ref
  var _opts = opts, prefix = _opts.prefix, _opts$forwardRefAs = _opts.forwardRefAs, forwardRefAs = _opts$forwardRefAs === void 0 ? isClassy ? 'ref' : 'innerRef' : _opts$forwardRefAs;
  var Wrapped = /*#__PURE__*/_reactDefault.default.forwardRef(function (_ref2, ref) {
    var props = _babelRuntimeHelpersEsmExtendsDefault.default({}, _ref2);
    props[forwardRefAs] = ref;
    var bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);
    return (
      /*#__PURE__*/_reactDefault.default.createElement(Component, _babelRuntimeHelpersEsmExtendsDefault.default({}, props, {
        bsPrefix: bsPrefix
      }))
    );
  });
  Wrapped.displayName = "Bootstrap(" + (Component.displayName || Component.name) + ")";
  return Wrapped;
}
exports.default = ThemeProvider;
